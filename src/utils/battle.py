import random
import asyncio

from utils.db.user import UserOrm


# –ö–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
class Character:
	def __init__(
			self,
			user_id: int,
			username: str = None
	):
		self.username = username
		self.hearts = (asyncio.run(UserOrm().get(user_id=user_id))).hearts
		self.attack = 0

	def is_alive(self):
		return self.hearts > 0

	def take_damage(self, damage):
		self.hearts -= damage

	def attack_mob(self, mob):
		damage = random.randint(1, self.attack)
		mob.take_damage(damage)
		return damage


# –ö–ª–∞—Å—Å –º–æ–±–∞
class Mob:
	def __init__(self, name, hp, attack):
		self.name = name
		self.hp = hp
		self.attack = attack

	def is_alive(self):
		return self.hp > 0

	def take_damage(self, damage):
		self.hp -= damage

	def attack_character(self, character):
		damage = random.randint(1, self.attack)
		character.take_damage(damage)
		return damage


# –ö–ª–∞—Å—Å –±–æ—è
class Battle:
	def __init__(self, player, mob):
		self.player = player
		self.mob = mob

	def player_turn(self):
		damage = self.player.attack_mob(self.mob)
		return f"üßî‚Äç {self.player.username} üî™ üßü {self.mob.username} ({damage} üí•)"

	def mob_turn(self):
		damage = self.mob.attack_character(self.player)
		return f"üßü {self.mob.username} üî™ üßî {self.player.username} ({damage} üí•)"

	def check_winner(self):
		if not self.player.is_alive():
			return f"üíÄ {self.player.username} –≤—ã –±—ã–ª–∏ —É–±–∏—Ç—ã!"
		elif not self.mob.is_alive():
			return f"üéâ {self.mob.username} –≤—Ä–∞–≥ –ø–æ–±–µ–∂–¥–µ–Ω!"
		return None


# –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Å—Ä–∞–∂–µ–Ω–∏–π
active_battles = {}


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—è–º–∏
def create_battle(player_name):
	player = Character(name=player_name, hp=100, attack=20)
	mob = Mob(name="–ó–æ–º–±–∏", hp=50, attack=10)
	battle = Battle(player, mob)
	return battle


def start_battle(user_id, player_name):
	if user_id in active_battles:
		return "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –±–æ–π. –ù–∞–ø–∏—à–∏ /attack, —á—Ç–æ–±—ã —É–¥–∞—Ä–∏—Ç—å"
	else:
		battle = create_battle(player_name)
		active_battles[user_id] = battle
		return f"–ù–∞—á–∞–ª—Å—è –±–æ–π! {player_name} –ø—Ä–æ—Ç–∏–≤ {battle.mob.username}! –£–¥–∞—Ä—å –º–æ–±–∞ –∫–æ–º–∞–Ω–¥–æ–π /attack."


def attack(user_id) -> str | None:
	if user_id not in active_battles:
		return "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—è. –ù–∞–ø–∏—à–∏ /fight, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."

	battle = active_battles[user_id]

	# –•–æ–¥ –∏–≥—Ä–æ–∫–∞
	player_message = battle.player_turn()

	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ—Å–ª–µ –∞—Ç–∞–∫–∏ –∏–≥—Ä–æ–∫–∞
	winner = battle.check_winner()
	if winner:
		del active_battles[user_id]
		return f"{player_message}\n{winner}"

	# –•–æ–¥ –º–æ–±–∞
	mob_message = battle.mob_turn()

	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ—Å–ª–µ –∞—Ç–∞–∫–∏ –º–æ–±–∞
	winner = battle.check_winner()
	if winner:
		del active_battles[user_id]
		return f"{player_message}\n{mob_message}\n{winner}"

	# –ï—Å–ª–∏ –±–æ–π –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
	return f"{player_message}\n{mob_message}"

